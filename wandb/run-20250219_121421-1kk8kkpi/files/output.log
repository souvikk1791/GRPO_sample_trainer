Loading model ..
get peft model
Creating reference model
start training
GRPO Training:   0%|                                                                              | 2/4680 [00:46<30:24:02, 23.40s/it, rewards=0, loss=0, kl_div=0, objective=0]
running inference
running inference
input_shape torch.Size([32, 1024])
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
grpo 1 over
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
grpo 2 over
running inference
running inference
input_shape torch.Size([32, 1024])
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
grpo 1 over
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
grpo 2 over
running inference
running inference
input_shape torch.Size([32, 1024])
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
grpo 1 over
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
grpo 2 over
running inference
running inference
input_shape torch.Size([32, 1024])
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
grpo 1 over
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
grpo 2 over
running inference
running inference
input_shape torch.Size([32, 1024])
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
grpo 1 over
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
grpo 2 over
running inference
running inference
input_shape torch.Size([32, 1024])
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
grpo 1 over
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
loss from sum: tensor(0., device='cuda:0', grad_fn=<SumBackward0>)
grpo 2 over
running inference
  File "/home/jovyan/data/vision training/GRPO_sample_trainer/trainer.py", line 101, in <module>
    trainer.train(dataloader, save_directory="models/")
  File "/home/jovyan/data/vision training/GRPO_sample_trainer/grpo.py", line 285, in train
    outputs = self.run_inference(self.model, inputs)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/GRPO_sample_trainer/grpo.py", line 242, in run_inference
    outputs = model.generate(
              ^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/peft/peft_model.py", line 1838, in generate
    outputs = self.base_model.generate(*args, **kwargs)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/torch/utils/_contextlib.py", line 116, in decorate_context
    return func(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/transformers/generation/utils.py", line 2255, in generate
    result = self._sample(
             ^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/transformers/generation/utils.py", line 3257, in _sample
    outputs = model_forward(**model_inputs, return_dict=True)
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/transformers/models/qwen2/modeling_qwen2.py", line 819, in forward
    outputs = self.model(
              ^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/transformers/models/qwen2/modeling_qwen2.py", line 577, in forward
    layer_outputs = decoder_layer(
                    ^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/transformers/models/qwen2/modeling_qwen2.py", line 275, in forward
    hidden_states = self.mlp(hidden_states)
                    ^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/transformers/models/qwen2/modeling_qwen2.py", line 56, in forward
    down_proj = self.down_proj(self.act_fn(self.gate_proj(x)) * self.up_proj(x))
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1739, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/torch/nn/modules/module.py", line 1750, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "/home/jovyan/data/vision training/py3.12/lib/python3.12/site-packages/peft/tuners/lora/layer.py", line 596, in forward
    def forward(self, x: torch.Tensor, *args: Any, **kwargs: Any) -> torch.Tensor:

KeyboardInterrupt
